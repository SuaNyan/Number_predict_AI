\documentclass[a4paper, 11pt, titlepage]{jsarticle}
\usepackage[dvipdfmx]{graphicx}
\usepackage{listings}
\usepackage{amsmath}
\usepackage{url}

\title{知能情報実験III（データマイニング班）\\自作の手書き数字の認識}
\author{215724B 高里優菜, 215748K 豊見山裕貴, 215749H 根路銘理子}
\date{提出日：2023年8月3日}
\begin{document}
\maketitle
\tableofcontents
\clearpage


\section{はじめに}


\subsection{実験の目的と達成目標}
今回の実験の目的は、手書き数字の認識を行う機械学習を製作することである。達成目標として
は、自作した手書き数字 (表記位置や角度などをずらしたものも含む) を与えても認識を行う事が
可能にすることである。


\subsection{テーマ「手書き数字の認識」とは}
手書き数字の認識は、その名の通り手書きで表記された数字のデータ画像を受け取り判定する技
術であり、ディジタル化が進んでいる現代社会において必要不可欠なものであるといえる。教育に
おける自動採点や、郵便局や銀行などでのナンバーの読み取り、タブレットなどのデバイス上での
手書き機能など、データ処理や自動化などの場面で活用する事ができる。


\section{実験方法}

\subsection{実験目的}
目的は、上記のテーマ説明に記してあるメリットを踏まえた上で、自分達で書いた数字を認識できる機械学習を製作することである。その際、できるだけ判断の正答率が高くなるよう、使用する学習器やデータセット、データ数などを調節する。

\subsection{データセット構築}
\subsubsection{トレーニングデータ}
scikit-learn ライブラリの MNIST データセットを使用し、全 70000 枚のうち 60000 枚のデータ
モデルを使用。
後半からは自作のトレーニング用データ50枚をMNISTのデータセットに追加している。

\subsubsection{テストデータ}
自作した0〜9までの数字10枚を使用。
後半からはより正答率を細かく見るために20枚に増やした。

\subsection{モデル選定}
多層パーセプトロン (ニューラルネットワーク) を基にした分類器である、MLPClassifier(Multi-
Layer Perceptron Classifier) という学習モデルを使用した。\\
\quad MLPClassifierは比較的簡単に実装でき、手書き数字認識などの問題に一般的によく適用されるモデルであるので使用した。このコードでは、MNISTデータセットを使ってMLPClassifierを訓練し、手書き数字画像に対して予測と分類を行う。

\subsection{パラメータ調整}
・hidden\_layer\_sizesを(128,64)として設定。\\この値は2つの要素からなるタプルで、それぞれ1つ目の隠れ層のノード数が128、2つ目の隠れ層のノード数が64である。\\
・max\_iterをmax\_iter=1000として設定。エポック数は、学習アルゴリズムが訓練データを何回反復して学習するかを制御するもので過学習を抑えるためにmax\_iterで1000として設定している。


\section{実験結果}
6月22日\\
トレーニングデータ\&テストデータ両方にMNISTデータセットを利用すると正答率9割を超えた。しかし、同じトレーニングデータのままテストデータを自作の手書き数字画像にすると、正答率が約1割になってしまった。(0〜9までの数値を与えてもほとんど2が出る。)\\

6月29日\\
画像を表示して正答率を調べるコードができた。しかし、自分たちで作成した画像認識の精度は前回と変化していない。\\

7月6日\\
トレーニングデータと同じ特徴量ベクトルにするために正規化をしないでみると自作モデルの正答率が1割から6割に上がった。\\

7月13日\\
角度と大きさを変えて編集した手書き数字0〜9を追加した。正答率が編集なしの手書き数字は6割だが、編集した手書き数字の正答率は2割に下がった。\\

7月20日\\
トレーニングデータ用の手書き数字を50枚(0〜9を5セット)追加して、そのうちの20枚をテストデータ用に利用したところ、正答率は10割になった。


\section{考察}
6月22日のトレーニングデータ\&テストデータ両方にMNISTデータセットを利用するという実験結果から、MNISTデータセットを使用してトレーニングデータとテストデータを用いると、高い正答率（9割以上）を達成できた。しかし、自作の手書き数字画像をテストデータとして使用した場合、正答率が（約6割）という正答率が低い結果となった。このことから、モデルはMNISTデータセットに適応されたが、外部の手書き数字に対して汎化性能が欠如している可能性があると考えられる。

自作の手書き数字について約6割になったテストデータを角度を変えて同じ正答率になるかを調べたところ正答率が2割に低下した。これはずれが大きいだけではなく、画像から文字がはみ出したりしていたことが正確な判断を下げる原因であると考えられる。

そこで、自作の数字画像の認識精度を上げるためにトレーニングデータの方に自作の数字画像そのものを学習させて同じものをテストデータとしたところ、正答率の大幅な上昇が見込めた（正答率10割）。さらにトレーニングデータに自作の数字画像を学習させていれば、同じ筆者が似せて書いたトレーニングデータにはない数字画像について正答率約7割が認められた。すなわち、MNISTで使用されていた数字画像にはない文字の太さ、紙の大きさ、書き方の特徴がある場合はトレーニングデータに一度学習させることで精度を上げることに直結するといえる。


\section{意図していた実験計画との違い}
\begin{figure}[htbp]
\begin{center}
\includegraphics[width=150mm]{report.png}
\caption{全体の計画と実際の進行}
\label{1}
\end{center}
\end{figure}


図\ref{1}を見てもわかる通り、予定が遅れて後半に重要な作業が集中している。約1ヶ月の大きなずれが生じていたが最後の2週間で良い進捗があったので終了間近の焦りは少なかった。ただ、予定のずれを縮めるためには授業以外で各が機械学習について学習するとか早めに作業分担をして進捗を進めるなどの工夫が必要であったと思われる。

\section{まとめ}
モデルの適切な選定をすることが重要であると思った。時間がなくて角度や位置のずれを訂正した時のコードを書けなかったので後進にはその場合を調べてみてほしい。

今回の機械学習で、高い精度を達成するためにはさまざまな要素が関与することがわかった。モデルの選択や、データセットの適切な構成など、これらの要素を適切に改善することが精度の向上につながるとわかった。

実際に機械学習を実装する中で、適切なデータセットの選択や前処理が非常に重要であると感じました。今回手書き数字の認識AIを制作しましたが、使用する画像のサイズや文字フォントの太さ、訓練用とテスト用のデータのスケールを統一するといった面でミスがあり、正答率が低くなってしまった時がありました。そのため、最初からどのようなデータで使用するかを決めてから取り組むことが重要であると学びました。

\begin{thebibliography}{n}
  \bibitem{mnist}THE MNIST DATABASE, \url{http://yann.lecun.com/exdb/mnist/}, 2023/08/03

	
\end{thebibliography}
\end{document}